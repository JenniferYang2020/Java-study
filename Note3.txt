JAVA基础数组：
    格式1：
        元素类型[] 数组名=new 元素类型[元素个数或数组长度]；
        int[] arr=new int[5];

    格式2：
        元素类型[] 数组名= new 元素类型[]{元素，元素，元素，....};
        int[] arr=new int[]{3,4,5};
    
    Tips:
        1. 创建一个数组，必须确立长度；
        2. 数组中的值没有确定会有默认值；
            int----0
            object----null
        [] ---->意味着数组

数组 内存空间划分：
    JVM会对Java进行内存划分，
    JVM内存划分有5片：
        1. 寄存器 --->给CPU用
        2. 本地方法区 ---->本地系统平台中的内容，和所在系统有关，版本不同
        3. 方法区 ----->暂时讲不到
        4. 栈内存
        5. 堆内存

        tips：{
            age=3;
        }   //这是局部代码块，限定局部变量的生命周期。

        栈内存：
            存储的都是局部变量，即凡是定义在方法中的变量，而且变量所属作用域一旦结束，该变量自动释放。
            特点：更新快，生命周期短。
        
        堆内存：
            存储的是数组和对象（其实数组就是对象的一种） 
            也可以理解为，凡是new的都建立在堆中。
            特点：
                1. 每个实体都有首地址值
                2. 堆内存中的每个变量都有默认初始化值： 整数--0， 小数--0.0 或者 0.0f, boolean--false, char-- '\u0000'
                3. 堆内存中有垃圾回收机制对其内存进行回收再利用。
                    int [] arr=new int[3];  //new时会在堆内存开辟空间，封装数据实体
                    /*
                        第一步，主函数进栈，开辟空间；
                        第二步，主函数中创建变量arr;
                        第三步：在堆内存中开辟空间创建一个长度为3的数组，并且声称地址值（0X0045）地址是连续的二进制，十六进制
                        第四步，把堆内存中的空间地址值赋给变量arr。
                    */
                
                                            //此时，堆内存中的变量都有初始化值
                    arr[0]=89;
                    arr=null; //取消引用变量的指向。arr不再指向堆内存中的某个地址。
                    tips:当堆中的对象没有引用后，变为垃圾，垃圾回收机制不定时检测，自动回收。

                int[] x=new int[3];
                int[] y=new int[3];

                x=y;//两个变量指向同一实体
                即：多个引用变量可指向同一实体。

    76 常见问题：
        int[] arr=new int[3];
        sop(arr[3]);  //ArrayIndexoutofBoundsException
        //这里编译可以通过，因为编译只检查语法，不开辟空间运行，
        //但是运行不可以，JVM创建空间时会有问题。
        
        arr=null;
        sop[(arr[0]) //NullPointerExecption,即当引用型变量没有实体指向还在操作实体。
        //编译可以，运行不行

        sop(arr) //此时打印的是数组地址的哈希值。 [I@c17164---->[ 意味着数组， I意味着整数， @c17164是数组的实体地址

    77 JAVA数组的第二种定义
        2. int[] arr=new int[]{1,2,3,...}; //
        3.int[] arr={1,2,3...} //静态初始化，不用new 运算。
        核心思想对角标操作

    78 数组的遍历
        length of Array:arr.length;
    
    79 最值
        
    80 基础数组  选择排序
        数组给一个function,是把内存给function，在内存中操作，操作完以后，内容改变。
    
    81冒泡排序：相邻相比，最大的会自动到最后。

        public static void bubbleSort(int[] arr){
        for(int i=0;i<arr.length-1;i++){  //第一个外循环控制排序躺数
            for(int y=0;y<arr.length-1-i;y++){ //内循环控制每一次排序多少次
                if(arr[y]>arr[y+1]){
                    int temp=arr[y];
                    arr[y]=arr[y+1];
                    arr[y+1]=temp;
                }

            }
        }
    }

    Java内置排序：
        Array.sort(arr); //java用的最快排序，希尔排序，用的是位运算
    
    排序性能问题

    查找：
        没有查到return -1, 返回数 -1 最合适，返回负数知道角标不存在

    折半查找：前提，被查数组必须有序
        （endIndex+startIndex）/2  //找中间位置

        Array.binary.Search  //java api 自动二分查找
            比如：binary(arr,50); //不存在，返回插入点的负数。负数是位了告诉你找不到，插入点告诉你可以在哪里插入。


    Java基础进制转换：
        获取一个16进制的表现形式。
        0000-0000 0000-0000 0000-0000 0011-1100   //这是60
        //每三位二进制是八进制，四位代表一位更短，16进制。
        要想把上面的数字换成16进制，就是4位代表一位。

        0011-1100
        3----C   //3C

        用计算机算，把一个数换算成16进制：
        第一步：&15，取最低四位的有效位数。
        第二步：去完以后，转成一个整数。
        第三步，不断向右移4位，继续取下四位， num>>>4
        第四步，再取后四位做换算，直到剩下的数字为0.
        总结：一个数组换算成16进制就是不断&15，然后右移。


            public static void toHex(int num){
        char[] arr={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
        char[] res=new char[8];
        int index=0;
        while(num!=0){
            int temp=num&15;

            //定义一个对应关系表
            
            
            res[index++]=arr[temp];
            
            num=num>>>4;
        }
        for(int i=res.length-1;i>=0;i--){
            System.out.print(res[i]);
        }
        // int n1=num&15;
        // System.out.println(n1);

        // num=num>>>4;
        // int n2=num&15;
        // System.out.println(n2);
    }
        
        如果数据出现对应关系，而且对应关系一方是有序的数字编号，可以作为角标使用。就可以将这些数据存储到数组中--->查表法。

        操作数组一定要角标，所以数组加元素时，用角标。

        Tips:void方程可以用 return 结束

        十六进制，
        八进制，
        二进制。
        Integer.toBinaryString(6);
        Integer.toHexString();

    







                