    This 关键字 使用场景二以及细节
        构造函数可调用一般函数，一般函数不能调用构造函数
        构造函数怎么访问构造函数？----> 用this(参数)
        this(参数)  //只能定义在构造函数第一行，因为初始化要先执行）

        Person(String name){
            this.name=name;
        }

        Person(String name,int age){
            this(name);  //因为构造函数是用于初始化对象，所以this代表当前对象。
            this.age=age;
        }
        tips:一个类中的成员想要被执行，一定要有对象调用。

        Person p=new Person("旺财"，30)；

        内存顺序：
        1. 在栈中创建引用变量p;
        2. 在堆内存中创建对象，默认初始化name是null  和 age是0。
        3. 构造函数Person(String name, int age)加载进栈，在这个函数中持有引用变量this指向调用它的对象。
        4. 加载this(name) 函数，即加载构造函数Person(String name)进栈，这个函数中也持有引用变量this，指向调用它的对象，初始化name=旺财，并根据this的指向，把堆内存中的对象name初始化为旺财。
        5. Person(String name)构造函数弹栈，Person(String name,int age)初始化age=30并把值赋给调用它的对象。弹栈。
        6. 最后主函数中的引用变量P指向堆内存中的对象。
        tips：对this函数的调用必须在构造函数中。
                如果对构造函数无限调用造成栈内存的无线循环，会导致溢栈 。


    This关键字的应用
            只要在本类中，用到本类对象（this）
            比如：
                在类中判断是否是同龄人：
                Public boolean compare(Person p){
                    this.age=p.age;
                }

    static 关键字 数据共享
        这是一个修饰符，用于成员变量和成员函数。

        变量被static修饰的数据：被所有对象共享的数据。

        共享内容先于对象存在。
        所以被static修饰的数据不仅可以被对象使用，还能被类名调用。

        static的特点：
            1. static是一个修饰符，用于修饰成员
            2. static修饰的成员被所有的对象所共享
            3. static优先于对象存在，因为static成员随着类的加载已经存在。
            4. staitic 修饰的成员多了一种调用方法，就可以直接被类名调用。
            5. static 修饰的数据是共享数据，对象中存储的是特有数据。

    成员变量和静态变量的区别
        被static修饰的是静态变量，即类变量。
        成员变量：即实例变量，实例中的变量
        类类型变量： Person p=new Person();

        成员变量和静态变量的区别：
            1.成员变量随着对象的创建而存在，随着对象的回收释放
              静态变量随着类的加载而存在，随着类的消失而消失
              tips：即两个变量的生命周期不同，类也是一种对象（垃圾回收机制）
            2.调用方法不同：
              成员变量只能被对象调用；
              静态变量不仅能被对象调用，还能被类名调用（建议用类调用）。
            3.别名不同：
              成员变量---->实例变量
              静态变量---->类类型变量
            4.存储位置不同：
              成员变量数据存储在堆内存的对象中，所以也叫对象的特有数据
              静态变量数据存储在方法区（的静态区），所以也叫对象的共享数据
            tips：方法区即存储方法的区域。

    static 关键字 注意事项
        类中的静态方法不能使用非静态变量。因为静态先于 对象存在，如果访问非静态成员，当用类调用静态时，非静态成员不存在。

        静态使用注意事项：
            1.静态方法只能访问静态成员
            2.静态方法中不可以定义/使用this或者super关键字
            3. 主函数是静态的。所以当主函数访问方法时：a.使方法静态，b.通过对象进行访问。
            tips:非静态能访问静态和非静态
    
    static 关键字 main函数解析
        public static void main(String[] args)
        public: 因为权限必须最大
        static:JVM调用main不需要对象，直接用主函数类名调用即可
        void: 主函数没有具体的返回值（有返回return,但没有返回值）
        main: 函数名，不是关键字，只是JVM识别的固定名
        String[] args：主函数参数列表，是一个string类型的数组参数

        这里args // [Ljava.lang.String@c17164
        args.length //长度是0

        JVM传了3个0长度的字符数组。
            原因：主函数留下一个入口，为了可以传入自定义运行所需的参数。
        为什么是字符数组？
            因为字符串最通用。

        主函数的特殊之处：
            1.格式是固定的
            2.被jvm所识别和调用

        怎么给主函数传值？
            java MainDemo haha hehe xixi //即当调用java命令行调用JVM时，在类名后面用空格区分单词，传入参数。
                                            即JVM调用函数时传入参数。

    static 关键字 内存图解
        public class PersonDemo {
    public static void main(String[] args){
        Person.method();
        Person p=new Person("Java",20);
        p.show();
    }
    
}

class Person{   //当两个class在同一个文件时，与文件名不同的class不能public出去
    private String name;
    private int age;
    static String country="CN";
    public Person(String name,int age){
        this.age=age;
        this.name=name;
    }

    public void show(){
        System.out.println(name+' '+age+' ');
    }

    public static void method(){
        System.out.println(country);
    }
}

    当java PersonDemo JVM开始加载，开辟空间。
    类加载进入内存，进入方法区，构造函数在类中同时进入方法区，这个时候构造函数会有所属对象的this引用。
    在方法区中有一片静态区，静态成员和方法进入这片区域，在这片方法区内的数据都是共享数据。
    tips：非静态方法区都有this，但是静态区没有。
    在上面的代码中，静态方法会首先加载进栈，运行完毕。
    然后在堆内存中创建对象默认初始化，
    再加载构造函数进栈对对象进行初始化。

    static 关键字 什么时候用
        1.静态变量：
            当分析对象中所具备的成员变量的值都是相同的，这时这个成员就可以被静态修饰。
            只要数据在对象中都是不同的，就是对象特有的数据，必须存储在对象中，是非静态的。
            如果是相同的数据，对象不需要修改，只需使用即可，不需要存储在对象中。
        2.静态函数：
            函数是否静态修饰，就参考一点，就是该函数是否有访问到对象中的特有数据。
            从源代码来看，该功能是否需要访问非静态变量，如果需要，该功能就是非静态的。
            如果不需要，就是静态的。
            因为如果没有访问特有数据，没有访问到，无需创建对象。
    
    static 关键字 静态代码块
        用于给类初始化。

        static{
            sop("hahah");
        }
        //随着类的加载而执行，new 类执行。
            记住是类的加载，类只加载一次，即进入方法区时，所以静态代码块只执行一次。

    构造代码块
        class Person{
            {
                //这是构造代码块。
            }
        }

        类中的独立代码块叫构造代码块：
            创建几个对象，调用几次，可以给所有对象进行初始化。即对象初始化的通用性。
        构造函数：
            是给对应的对象进行针对性初始化
        在函数中的局部代码块：
            用于限定局部变量的生命周期
        
    面向对象：
        当方法没有访问特有数据时，静态化
        当一个类不需要创建对象，为保证不让其他程序创建该类对象，可以使构造函数初始化。

    面向对象 数组工具类 文档注释
        当把类文件发给别人时，需创建对应的说明书
        javadoc .exe //用于提取文档注释，只提取被保护或公有成员文档信息
        文档中有一些关键字：
            @ahthor
            @version

            javadoc -d 指定目录（如果目录不存在，在当前目录创建这个folder）  -version -author 文件名（这个文件类必须是public，才能文档化）

    面向对象 单例设计模式 概述与体现
        设计模式：对问题行之有效的解决方法。其实是一种思想。
        32中设计模式
    
    单例设计模式 //即单个实例
        解决的问题：就是可以保证一个类在内存中的对象唯一性。
        比如，对于多个程序使用同一个配置信息对象时，就需要保证该对象的唯一性。

        如何保证对象的唯一性？
            1. 不允许其他程序用new创建该类对象，
            2. 在该类中创建一个本类实例
            3. 对外提供一个方法让其他程序可以获取对象。

        当A、B程序都有configFile的对象时，为保证A、B用到同一个对象，A或B改变configFile内容时，互相知道，用单例设计模式。
        
        步骤：
            1.私有化该类的构造函数
            2.通过new 在本类中创建一个本类对象。（也要加私有，必须静态化，因为用到这个的方法是静态，也因为是公共的对象）
            3.定义一个公有的方法，将创建的对象返回。（要静态化这个方法，因为其他类不能通过对象的得到这个方法）

        两种方法获取对象：
            1.Single ss=Single.s; //通过静态成员获取
            2.Single ss=Single.getInstance(); //通过静态方法获取。

        既然可以通过静态成员获取，为什么需要方法？
            可控，因为在使用这个对象时，可能需要加条件。
            成员变量尽量私有,所以这个静态对象尽量私有。
            
    单例设计模式 内存图解
        public class Single {
    private static Single s=new Single();

    private Single(){}
    public static Single getInstance(){
        return s;
    }  
}

    当静态成员一加载进方法区，已经有了对象的地址，调用方法时，返回的都是同一个对象。
      
    懒汉模数：单例的另一种方式

    
class Single2{
    private static Single2 s=null;
    
    private Single2(){}

    public static Single2 getInstance(){
        if(s==null){
            s=new Single2();
        }
        return s;
    }
}

    第一种（饿汉模式）：类一加载就已经存在了。开发时多用这个
    第二种（懒汉模式）：类加载进来没有对象，只有调用getInstance()方法时，才会创建对象。（这是一种延迟加载形式）。
        懒汉的缺点：当被多线程访问时，不能保证对象的唯一性。

    


        