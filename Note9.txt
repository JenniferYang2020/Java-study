包 线程

    面向对象 包(Package)
        1.对类文件进行分类管理，其实就是文件夹。（把同名java文件分类管理）
        2.给类提供多层命名(名称)空间。A文件夹的类/B文件夹的类

        如果定义包：定义包时最好都小写：
        package mypack; //写在java文件的第一行。
        //运行后的包文件要放进同名文件夹

        如何编译和运行：
        javac -d .PackageDemo.java //会咋当前目录生成一个mypack名的文件夹，文件夹里有PackageDemo.class文件
        java mypack(文件夹名).PackageDemo

    包之间的访问 protected
        在当前文件没有要用的类的java或class 文件时，保证有同名文件名。
        1.当DemoA类有包所属时，在使用时所以必须明确包名。DemoA这个名是错误的，正确的名称是：
          包名.类名---->packa.DemoA
          packa.DemoA a=new packa.DemoA();
        2.在当前目录找不到packa包，应该配置classpath或放在同一目录下
        3.有了包以后，在包中的function或变量没加public,就是被封装的。

        总结： 包与包之间的类进行访问，被访问的包中的类必须是public的，被访问的包中的类的方法也必须是public的

        权限：protected -->只有不同包的子类能使用，继承以后才能拿到。但不继承不能访问。

        public:同一类中，同一包中，不同包的子类中，不同包中  都可以
        protected:同一类中，同一包中，不同包的子类中,可以      但是不同包中不可以
        default:同一类中，同一包中 可以    但是   不同包的子类中，不同包中不可以
        private:同一类中 可以    但是同一包中，不同包的子类中，不同包中不可以


    面向对象 包 导入 import  用于导入类
    import packa.DemoA; //导入了packa包中的DemoA类
        DemoA a=new DemoA(); //导入包以后，new对象就可以直接用类名，不用带包名

    import packa.*; //导入packa包中的所有的类

    导入包的原则：用到哪个类，就导入哪个类
    import的作用：为了简化类名书写

    Jar包
        java的压缩包。
        可以把多个目录压缩成一个文件。怎么做呢？
        用到一个工具 jar.exe.
        jar命令行。真正做的时候用的是高级工具里的现成的编译。
        jar -cf haha.jar(压缩包名) pack（要放进压缩包的文件夹）



    多线程概述
        进程：正在进行的程序，即应用程序对应的内存中开辟的空间。进程用于分配空间

        线程：执行路径，控制单元。就是进程中一个负责执行的控制单元(执行路劲)

        多线程：一个进程中可以有多个执行路劲

        一个进程至少要有一个线程。
        开启多个线程是为了同时运行多部分代码
        每个线程都有自己运行的内容。这个内容可以称为线程要执行的任务。

    多线程的好处与弊端
        其实一个CPU在某个时刻只运行某个线程，一旦程序多了以后，程序被CPU处理的时间就会缩短，程序的处理时间会延长。
        双核，双Cpu，同时执行。cpu的切换时随机的，根据时间片段，应用程序执行都是cpu做着快速切换完成。 
        多线程：解决多个程序多部分同时执行或运行。
        弊端：线程太多，会导致效率降低。

    多线程JVM中的多线程解析
        JVM启动时就启动了多个线程，至少有两个线程可以分析出来：
        1. 执行main函数的线程：该线程任务的任务代码都定义在main函数中
        2.负责垃圾回收的线程：垃圾回收机制

    每个对象都有垃圾回收方法：定义在object中 finalize() 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。
        System.gc() //运行垃圾回收器

        new Demo();
        new Demo();
        new Demo();
        System.gc(); //垃圾回收器启动，新线程启动
        System.out.println()  //在垃圾回收器启动后，主函数线程会同时继续运行，回收器了能在主函数线程结束后再出现，也可能在之前出现。

    多线程  主线程运行示例
        class Demo{
            private String name;
            Demo(String Demo){
                this.name=name;
            }
            show(){

            }
        }


        public static void main(String[] args){
            Demo d1=new Demo("xixi");
            Demo d2=new Demo("haha");
            d1.show();
            d2.show();

        }
        主线程运行时时单线程。
        多线程是:
            希望实现xixi和haha同时执行，xixi一个路劲，haha一个路径。
            当主线进行时，中间有段需长时间loop，此时可另定义一条线程，在loop没完成前，另其执行Loop后面的语句。

            


